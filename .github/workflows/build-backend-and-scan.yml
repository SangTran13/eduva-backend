name: Backend Build and Sonar Scan

on:
  pull_request:
    paths:
      - backend/**

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  build:
    name: Build Backend and SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      # Cache NuGet packages
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Cache SonarQube scanner
      - name: Cache SonarQube scanner
        uses: actions/cache@v4
        with:
          path: ~/.dotnet/tools
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: |
            ${{ runner.os }}-sonar-scanner

      - name: Install dotnet tools
        run: |
          dotnet tool install --global dotnet-sonarscanner --no-cache
          dotnet tool install --global coverlet.console --no-cache
          dotnet tool install --global dotnet-reportgenerator-globaltool --no-cache

      - name: Add dotnet tools to PATH
        shell: bash
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Start SonarQube analysis
        run: >
          dotnet-sonarscanner begin
          /k:"Eduva-Backend"
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          /d:sonar.cs.opencover.reportsPaths="backend/coverage.opencover.xml"
          /d:sonar.coverage.exclusions="**/Program.cs,**/*Extension*.cs,**/Migrations/**/*.cs,**/*.Test.cs"

      - name: Build solution
        run: dotnet build backend/backend.sln --no-incremental

      - name: Run Tests with Coverage
        run: |
          cd backend
          # Remove any existing coverage files
          rm -f coverage.*.xml coverage.json

          # Run tests and collect coverage from all projects
          dotnet test --no-build --logger "trx;LogFileName=test_results.trx" \
          --collect:"XPlat Code Coverage" \
          --settings coverlet.runsettings \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: Process Coverage Reports
        run: |
          cd backend

          # List all coverage files for debugging
          echo "Looking for coverage files..."
          find . -name "*.opencover.xml" -o -name "coverage.cobertura.xml" -type f | head -20

          # Find the main coverage file from XPlat Code Coverage
          COVERAGE_FILE=$(find . -name "coverage.cobertura.xml" -type f | head -1)

          if [ -n "$COVERAGE_FILE" ]; then
            echo "Found XPlat Code Coverage file: $COVERAGE_FILE"
            
            # Convert Cobertura to OpenCover format using reportgenerator
            reportgenerator \
            -reports:"$COVERAGE_FILE" \
            -targetdir:"." \
            -reporttypes:"Cobertura" \
            -filefilters:"-**/Migrations/**;-**/Program.cs;-**/*Extension*.cs;-**/*.Test.cs" \
            -title:"Eduva Backend Coverage"
            
            # Rename to what SonarQube expects
            if [ -f "Cobertura.xml" ]; then
              mv Cobertura.xml coverage.opencover.xml
            fi
          else
            echo "XPlat Code Coverage file not found, looking for individual coverage files..."
            
            # Look for coverage files in test directories
            COVERAGE_FILES=$(find ./tests -name "coverage.opencover.xml" -type f)
            
            if [ -n "$COVERAGE_FILES" ]; then
              echo "Found coverage files in test directories:"
              echo "$COVERAGE_FILES"
              
              # Use the first available coverage file
              FIRST_FILE=$(echo "$COVERAGE_FILES" | head -1)
              echo "Using coverage file: $FIRST_FILE"
              cp "$FIRST_FILE" ./coverage.opencover.xml
            else
              echo "No coverage files found anywhere, creating minimal coverage file"
              echo '<?xml version="1.0" encoding="utf-8"?><CoverageSession xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><Summary numSequencePoints="0" visitedSequencePoints="0" numBranchPoints="0" visitedBranchPoints="0" sequenceCoverage="0" branchCoverage="0" maxCyclomaticComplexity="0" minCyclomaticComplexity="0" visitedClasses="0" numClasses="0" visitedMethods="0" numMethods="0" /></CoverageSession>' > coverage.opencover.xml
            fi
          fi

          # Final verification
          if [ -f coverage.opencover.xml ]; then
            echo "Final coverage file verification:"
            ls -la coverage.opencover.xml
            echo "File size: $(wc -c < coverage.opencover.xml) bytes"
            echo "First few lines:"
            head -10 coverage.opencover.xml
          else
            echo "ERROR: No coverage file could be created!"
            exit 1
          fi

      - name: End SonarQube analysis
        if: always()
        run: dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Run SonarQube Scanner for brief report
        if: success()
        id: sonar_scan_report
        run: |
          # Extract top issues from SonarQube API
          SONAR_PROJECT_KEY="Eduva-Backend"
          SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}"
          SONAR_HOST_URL="${{ secrets.SONAR_HOST_URL }}"

          # Wait a moment for SonarQube to process results
          sleep 15

          # Get issues count by severity and code coverage
          ISSUES_SUMMARY=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/search?componentKeys=${SONAR_PROJECT_KEY}&resolved=false&ps=1" | jq -r '.total')
          BUGS_COUNT=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/search?componentKeys=${SONAR_PROJECT_KEY}&types=BUG&resolved=false&ps=1" | jq -r '.total')
          VULNERABILITIES=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/search?componentKeys=${SONAR_PROJECT_KEY}&types=VULNERABILITY&resolved=false&ps=1" | jq -r '.total')
          CODE_SMELLS=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/search?componentKeys=${SONAR_PROJECT_KEY}&types=CODE_SMELL&resolved=false&ps=1" | jq -r '.total')

          # Try multiple approaches to get code coverage
          # First attempt with component measures API
          CODE_COVERAGE=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/measures/component?componentKey=${SONAR_PROJECT_KEY}&metricKeys=coverage" | jq -r '.component.measures[0].value // "N/A"')

          # If coverage is still N/A, try with the measures search API
          if [ "$CODE_COVERAGE" = "N/A" ] || [ -z "$CODE_COVERAGE" ]; then
            echo "Trying alternative approach to get coverage..."
            CODE_COVERAGE=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/measures/search?projectKeys=${SONAR_PROJECT_KEY}&metricKeys=coverage" | jq -r '.measures[0].value // "N/A"')
          fi

          # If coverage is still N/A, try with a longer wait time and retry
          if [ "$CODE_COVERAGE" = "N/A" ] || [ -z "$CODE_COVERAGE" ]; then
            echo "Waiting longer for coverage data to be processed..."
            sleep 30
            CODE_COVERAGE=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/measures/component?componentKey=${SONAR_PROJECT_KEY}&metricKeys=coverage" | jq -r '.component.measures[0].value // "N/A"')
          fi

          # Create issue summary as output
          ISSUE_SUMMARY="Total issues: $ISSUES_SUMMARY\n- 🐛 Bugs: $BUGS_COUNT\n- 🔒 Vulnerabilities: $VULNERABILITIES\n- 🧹 Code Smells: $CODE_SMELLS\n- 📊 Code Coverage: $CODE_COVERAGE%"
          echo "issue_summary<<EOF" >> $GITHUB_OUTPUT
          echo -e "$ISSUE_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Add SonarQube summary to PR
        if: success()
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## SonarQube Analysis Complete ✅

            ${{ steps.sonar_scan_report.outputs.issue_summary }}

            [View detailed analysis results on SonarQube](${{ secrets.SONAR_HOST_URL }}/dashboard?id=Eduva-Backend)
